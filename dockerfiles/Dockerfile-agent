FROM python:3.8
LABEL key="Matthieu Gouel <matthieu.gouel@gmail.com>"

WORKDIR /app

# Compilation tools
RUN apt-get update
RUN apt-get -y install gnupg gcc g++ cmake libboost-all-dev git autoconf automake build-essential
RUN apt-get -y clean all
RUN apt-get update

# PF RING
ARG PFRING
ENV AGENT_PFRING=${PFRING:+on}
ENV AGENT_PFRING=${PFRING:-off}
RUN if [ "$PFRING" = "on" ] ; then apt-get update && \
    apt-get -y -q install wget lsb-release && \
    wget -q http://apt.ntop.org/16.04/all/apt-ntop.deb && dpkg -i apt-ntop.deb && \
    apt-get clean all && \
    apt-get update && \
    apt-get -y install pfring && \
    apt-get -y clean all ; fi

# Libcperm
RUN git clone https://github.com/lancealt/libcperm.git
RUN cd libcperm && \
    ./autogen.sh && \
    ./configure && \
    make -j8 && \
    make install

# Libtins
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y libpcap-dev libssl-dev
RUN git clone https://github.com/mfontanini/libtins.git
RUN cd libtins && \
    mkdir build && \
    cd build && \
    cmake .. -DLIBTINS_ENABLE_CXX11=1 && \
    make -j8 && \
    make install
RUN ldconfig

# Terashuf
RUN git clone https://github.com/alexandres/terashuf.git
RUN cd terashuf && make -j8 && cd ..
ENV TMPDIR /app/reader/resources/
ENV MEMORY 24

# Web page
RUN apt-get -y install nginx
RUN rm -f /var/www/html/*
COPY statics/index.html /var/www/html/index.html
EXPOSE 80

# Debug tools
RUN apt-get update
RUN apt-get install -y gdb tcpdump traceroute nload

# Diamond-Miner Prober
RUN git clone https://github.com/dioptra-io/diamond-miner-cpp.git prober
RUN mkdir prober/resources
COPY statics/excluded_prefixes /app/prober/resources
WORKDIR /app/prober
RUN if [ "$PFRING" = "enable" ] ; then mkdir build && \
    cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Debug -DPROBER=1 -DPF_RING=1 && \
    make -j8 ; else mkdir build && \
    cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Debug -DPROBER=1 && \
    make -j8 ; fi

# Iris Agent
WORKDIR /app

RUN pip install --upgrade pip
RUN pip install poetry
RUN poetry config virtualenvs.create false

COPY pyproject.toml pyproject.toml
RUN poetry install --no-root --no-dev

COPY iris iris
COPY iris/agent/main.py main.py

RUN mkdir targets
RUN mkdir results

CMD ["python", "-u", "main.py", "&", "nginx"]